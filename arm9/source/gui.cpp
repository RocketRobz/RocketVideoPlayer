#include <nds.h>

#include "gl2d.h"
#include "graphics/fontHandler.h"

#include "buttons.h"
#include "large_buttons.h"
#include "userpal.h"

#include "rvidHeader.h"

extern bool videoPlaying;
extern int currentFrame;
extern int loadedFrames;

extern char filenameToDisplay[256];

extern char timeStamp[96];

static int currentBarAdjust = 0;
static int barAdjust = 0;

static int buttonTexID[2];

extern u16* colorTable;
extern u16 whiteColor;
static u16 titleBarColor = RGB15(0/8, 176/8, 248/8);
static u16 titleBarEdgeColor = RGB15(160/8, 224/8, 248/8);
static u16 bottomGrayBarColor = RGB15(184/8, 184/8, 184/8);
static u16 playBarEdgeColor = RGB15(152/8, 152/8, 152/8);
static u16 playBarGrayPartColor = RGB15(96/8, 96/8, 96/8);
static u16 playBarSliderEdgeColor = RGB15(120/8, 120/8, 120/8);
static u16 playBarSliderShadeColor = RGB15(216/8, 216/8, 216/8);

static glImage buttonImage[2][(128 / 32) * (128 / 64)];

void loadGraphics(void) {
	extern bool useTwlCfg;
	extern u8 *twlCfgAddr;

	const int favoriteColor = (int)(useTwlCfg ? twlCfgAddr[0x44] : PersonalData->theme);

	titleBarColor = userPal[favoriteColor][0];
	titleBarEdgeColor = userPal[favoriteColor][1];

	if (colorTable) {
		titleBarColor = colorTable[titleBarColor];
		titleBarEdgeColor = colorTable[titleBarEdgeColor];
		bottomGrayBarColor = colorTable[bottomGrayBarColor];
		playBarEdgeColor = colorTable[playBarEdgeColor];
		playBarGrayPartColor = colorTable[playBarGrayPartColor];
		playBarSliderEdgeColor = colorTable[playBarSliderEdgeColor];
		playBarSliderShadeColor = colorTable[playBarSliderShadeColor];

		u16* buttonsPalChange = (u16*)buttonsPal;
		u16* large_buttonsPalChange = (u16*)large_buttonsPal;
		for (int i = 0; i < 16; i++) {
			buttonsPalChange[i] = colorTable[buttonsPalChange[i]];
			large_buttonsPalChange[i] = colorTable[large_buttonsPalChange[i]];
		}
	}

	buttonTexID[0] = glLoadTileSet(buttonImage[0], // pointer to glImage array
							128, // sprite width
							64, // sprite height
							128, // bitmap width
							128, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_128, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_128, // sizeY for glTexImage2D() in videoGL.h
							TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							16, // Length of the palette to use (16 colors)
							(u16*) buttonsPal, // Load our 16 color tiles palette
							(u8*) buttonsBitmap // image data generated by GRIT
							);

	buttonTexID[1] = glLoadTileSet(buttonImage[1], // pointer to glImage array
							256, // sprite width
							32, // sprite height
							256, // bitmap width
							32, // bitmap height
							GL_RGB16, // texture type for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_256, // sizeX for glTexImage2D() in videoGL.h
							TEXTURE_SIZE_32, // sizeY for glTexImage2D() in videoGL.h
							TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
							16, // Length of the palette to use (16 colors)
							(u16*) large_buttonsPal, // Load our 16 color tiles palette
							(u8*) large_buttonsBitmap // image data generated by GRIT
							);

	fontInit(favoriteColor);
}

bool updatePlayBar(void) {
	barAdjust = currentFrame/(rvidFrames/222);
	if (barAdjust > 224) {
		barAdjust = 224;
	}
	if (currentBarAdjust == barAdjust) {
		return false;
	}
	currentBarAdjust = barAdjust;
	return true;
}

void resetPlayBar(void) {
	barAdjust = 0;
}

void renderGui(void) {
	clearText(false);
	printLarge(false, 4, 20, filenameToDisplay);
	printSmallCentered(false, 120, timeStamp);

	glBegin2D();
	{
		glBoxFilled(0, 0, 255, 191, whiteColor);		// BG
		/*if (currentFrame > loadedFrames) {
			glBoxFilled(0, 0, 255, 59, RGB15(248/8, 0/8, 0/8));			// Title bar
			glBoxFilled(0, 58, 255, 58, RGB15(255/8, 0/8, 0/8));		// Title bar edge
		} else {*/
			glBoxFilled(0, 0, 255, 59, titleBarColor);			// Title bar
			glBoxFilled(0, 58, 255, 58, titleBarEdgeColor);		// Title bar edge
		//}
		glBoxFilled(0, 160, 255, 191, bottomGrayBarColor);	// Bottom gray bar
		glBoxFilled(14, 142, 241, 145, playBarEdgeColor);	// Play bar horizontal edge
		glBoxFilled(15, 141, 240, 146, playBarEdgeColor);	// Play bar mid edge
		glBoxFilled(16, 140, 239, 147, playBarEdgeColor);	// Play bar vertical edge
		glBoxFilled(16, 142, 239, 145, whiteColor);	// Behind gray part of play bar
		glBoxFilled(16+barAdjust, 142, 239, 145, playBarGrayPartColor);	// Gray part of play bar
		glBoxFilled(12+barAdjust, 134, 19+barAdjust, 153, playBarSliderEdgeColor);	// Play bar slider edge
		glBoxFilled(14+barAdjust, 136, 17+barAdjust, 151, whiteColor);	// Play bar slider
		glBoxFilled(14+barAdjust, 148, 17+barAdjust, 151, playBarSliderShadeColor);	// Play bar slider shading

		glSprite(73, 76, GL_FLIP_NONE, &buttonImage[0][videoPlaying]);
		glSprite(2, 162, GL_FLIP_NONE, buttonImage[1]);

		updateText(false);
		glColor(RGB15(31, 31, 31));
	}
	glEnd2D();
	GFX_FLUSH = 0;
}
